{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpert.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","image","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpert","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGZC,mBAAS,IAHG,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAoC9C,OACI,0BAAMC,SAvBS,SAACC,GAChBA,EAAEC,iBAKCJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OAEvCN,EAAc,MAgBd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAlCgB,SAAC,GAAY,IAC1BD,EADyB,EAAVE,OACfF,MACPR,EAAcQ,Q,uBCZNG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAKbC,EALa,iDAKkCC,UAAWH,GAL7C,+DAOAI,MAAMF,GAPN,cAOXG,EAPW,gBASGA,EAAKC,OATR,uBASVC,EATU,EASVA,KAGDC,EAAKD,EAAKE,KAAI,YAGhB,MAAO,CACHC,GAJiC,EAAnBA,GAKdC,MALiC,EAAhBA,MAMjBC,MANiC,EAAVC,OACtBC,iBACDZ,QAdS,kBAsBVM,GAtBU,4CAAF,sDCCVO,EAAc,SAAC,GAAqB,EAApBL,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,MAIlC,OAEI,yBAAKI,UAAU,2CAGf,yBAAKC,IAAML,EAAQM,IAAMP,IACzB,+BAAMA,EAAN,OCLKQ,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECJX,SAAEA,GAAe,IAAD,EAGdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAL4B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAkDxC,OAzCFC,qBAAU,WAERxB,EAASC,GAEJwB,MAAM,SAAAC,GAGCH,EACI,CACIf,KAAKkB,EACLL,SAAQ,SAS3B,CAACpB,IAsBKqB,EDtCmBK,CAAa1B,GAA9Ba,EAR0B,EAQ/BN,KAAYa,EARmB,EAQnBA,QA4BhB,OACI,oCACA,wBAAIJ,UAAU,qCAAsChB,GAOhDoB,GAAW,uBAAGJ,UAAU,oCAAb,eAKf,yBAAKA,UAAU,aAKHH,EAAOJ,KAAI,SAAEkB,GAAF,OACP,kBAAC,EAAD,eACDC,IAAKD,EAAIjB,IACNiB,UETXE,EAnDG,WAAM,MAIgB3C,mBAAS,CAAC,cAJ1B,mBAIb4C,EAJa,KAID7C,EAJC,KAkBpB,OACI,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAIA,4BAEQ6C,EAAWrB,KAAI,SAACT,GAAD,OAKT,kBAAC,EAAD,CACA4B,IAAO5B,EACPA,SAAWA,U,MCnCjC+B,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.bf37c658.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    //Si el useState no tiene algún valor aparecerá warning por ser undefined entonces lo definimos con string vacío\r\n    const [inputValue, setInputValue]=useState('');\r\n\r\n    //para yo utilizar el evento de mostrar un valor del input , llamo a los métodos del evento del callback\r\n    //aplicamos destructuring para el e.target.value\r\n    //con esto si podemos cambiar todo\r\n    const handleInputChange=({target})=>{\r\n        const {value}=target\r\n        setInputValue(value);\r\n    }\r\n\r\n    /*para el enter del input*/\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();//prevenir el comportamiento por defecto del formulario\r\n        //console.log('Submit hecho');\r\n\r\n\r\n        //Validación\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats=>[inputValue,...cats]);\r\n        }\r\n        setInputValue('');//Después del enter queda vacío\r\n\r\n       \r\n    }\r\n\r\n    \r\n    \r\n\r\n\r\n    /*El fragment agrupa elementos html o jsx*/\r\n\r\n/*El onchange se actualiza cada vez que cambia*/\r\n/*Onsubmit envía un formulario*/\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n       \r\n        <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n        />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n   export const getGifs= async( category )=>{\r\n\r\n        /*Encode URI convierte los espacios en porcentaje o símbolo mas*/\r\n\r\n        //IMPORTANTE CUANDO PEGUES DE POSTMAN LOS ESPACIOS SE COMPLETAN CON + Y SE LE PONE HTTPS://\r\n        let url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=tOABssXIdHe3QlBdR0TSMB0aGdH8a6PW`;\r\n\r\n        const resp=await fetch(url)\r\n\r\n        const {data}= await resp.json();\r\n\r\n        //de data yo obtendré las imágenes o datos que unicamente necesito utilizando map\r\n        const gifs=data.map(({id,title,images})=>{\r\n           let { downsized_medium }=images\r\n           let {url}=downsized_medium\r\n            return {\r\n                id:id,\r\n                title:title,\r\n                image:url,\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n      \r\n//console.log(gifs)\r\n//setImages(gifs)\r\n\r\n    }\r\n//getGifs();","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,image}) => {\r\n\r\n   // console.log({id,title,url})\r\n      /*en vez de class es className*/\r\n    return (\r\n     \r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n       {/* {img.title}*/}\r\n\r\n        <img src={ image } alt={ title } />\r\n        <p> { title } </p>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","//colección de elementos que coinciden con esa categoría\r\n//borrar useeffect y usestate\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/GetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n\r\n  //  const [images,setImages]=useState([]);\r\n//Importamos el hook useFetchGif\r\n//Desestructurando\r\n //  const {data, loading}= useFetchGifs();\r\n const {data:images,loading}= useFetchGifs(category);\r\n   //console.log(data);\r\n   //console.log(loading)\r\n    //HACER PETICIONES HTTP DE ACUERDO A LAS IMAGENES\r\n    //USAMOS POSTMAN PARA REALIZAR prueba API-, peticiones get\r\n\r\n\r\n\r\n    //segundo párametro arreglo de dependencia, el useEffect solo se dispara una única ver porque el arreglo está vacío\r\n    //solo quiero que se ejecute este código cuando el código es renderizado por primera vez\r\n    /*useEffect(()=>{\r\n        //Cómo el getGifs\r\n        getGifs(category)\r\n            //.then(img=>setImages(img))\r\n            .then(setImages)\r\n    },[ category ])*/\r\n\r\n\r\n\r\n\r\n\r\n //{id,title}\r\n/* (<li key={ id }>{ title }</li>)*/\r\n\r\n/*Card-grid contenedor de cartas*/\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n        { \r\n            //operador ternario, si el loading es true muestra 'Cargando' sino 'Data Cargada'\r\n            //loading ? 'Cargando...' : 'Data cargada'\r\n\r\n            //usamos &&(ampersand) and\r\n            loading && <p className=\"animate__animated animate__flash\">Loading ...</p>\r\n            //se utiliza flash para darle una animación de parpadeo\r\n            \r\n            \r\n            }\r\n        <div className=\"card-grid\">\r\n           \r\n            \r\n                {\r\n                    \r\n                    images.map(( img )=>\r\n                       (<GifGridItem \r\n                       key={img.id}\r\n                      {...img} />))\r\n                }\r\n            \r\n        </div> \r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true,\r\n    });\r\n//los efectos no pueden ser async\r\n//hace el efecto cuàndo cambia la categorìa\r\n  useEffect(() => {\r\n        //peticiòn http\r\n    getGifs( category )\r\n    //traemos las imàgenes\r\n        .then( imgs=>{\r\n           // setTimeout(()=>{\r\n              //  console.log(imgs)\r\n                setState(\r\n                    {\r\n                        data:imgs,\r\n                        loading:false\r\n                    }\r\n                )\r\n\r\n         //   },3000)\r\n           \r\n        })\r\n\r\n\r\n  }, [category])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /* setTimeout(()=>{\r\n\r\n        setState({\r\n            data:[1,2,3,4,5,6,7],\r\n            loading:false\r\n        })\r\n\r\n\r\n    },3000);\r\n */\r\n    //a los 3 segundos ejecuta lo que tiene adentro el setTimeout , que en este caso sería el setState con su valor\r\n\r\n\r\n\r\n    return state; // {data:[],loading:true}\r\n}\r\n","import React,{ useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpert = () => {\r\n\r\n    //const categories=['One Punch','Samurai X','Dragon Ball']\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n\r\n    /*const handleAdd=()=>{\r\n        //se usa spread para agregar elementos con el botón que se ubica en el return\r\n       // const newArray=[...categories,'China']\r\n        setCategories([...categories,'HunterXHunter']);\r\n       // setCategories(cats=>[...cats,'HunterXHunter']);\r\n    }*/\r\n\r\n\r\n\r\n    //Cuándo tu quieras poner un arreglo dentro del return y del fragment se pone en llaves\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={ setCategories } />\r\n        <hr />\r\n        {/*Agregar un elemento al arreglo categories*/}\r\n       {/* <button onClick={handleAdd}>Agregar</button>*/}\r\n\r\n        <ol>\r\n            {   //map es una propiedad que regresa un nuevo arreglo sin modificar el actual\r\n                categories.map((category)=>\r\n                    //si no le pongo key sale error en cosola\r\n                    //los paréntesis se igualan al return\r\n                  //( <li key={category}>{category}</li>)\r\n                  ( \r\n                      <GifGrid \r\n                      key= { category }\r\n                      category={ category } />\r\n                  )\r\n                )\r\n            }\r\n        </ol>\r\n\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nGifExpert.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpert\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpert from './GifExpert';\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpert />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}